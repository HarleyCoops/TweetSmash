version: '3.8'

services:
  # Redis for caching and Celery broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # PostgreSQL for n8n
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-n8n}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-n8n}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-n8n}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # n8n workflow automation
  n8n:
    image: n8nio/n8n:latest
    ports:
      - "${N8N_PORT:-5678}:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - WEBHOOK_URL=${N8N_WEBHOOK_BASE_URL}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-n8n}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n-workflows:/workflows
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Server
  mcp-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
    volumes:
      - ./mcp-server:/app
      - ./logs:/app/logs
    environment:
      - TWEETSMASH_API_KEY=${TWEETSMASH_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NOTION_TOKEN=${NOTION_TOKEN}
      - NOTION_DATABASE_ID=${NOTION_DATABASE_ID}
      - REDIS_URL=redis://redis:6379/0
      - MCP_LOG_LEVEL=${MCP_LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    command: python server.py
    restart: unless-stopped

  # FastAPI Webhook Server
  webhook-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
    ports:
      - "${WEBHOOK_SERVER_PORT:-8000}:8000"
    volumes:
      - ./mcp-server:/app
      - ./logs:/app/logs
    environment:
      - TWEETSMASH_WEBHOOK_SECRET=${TWEETSMASH_WEBHOOK_SECRET}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    command: uvicorn webhook_server:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for async processing
  celery-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
    volumes:
      - ./mcp-server:/app
      - ./logs:/app/logs
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - TWEETSMASH_API_KEY=${TWEETSMASH_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NOTION_TOKEN=${NOTION_TOKEN}
      - NOTION_DATABASE_ID=${NOTION_DATABASE_ID}
    depends_on:
      redis:
        condition: service_healthy
    command: celery -A processors.queue worker --loglevel=info
    restart: unless-stopped

  # Celery Beat for scheduled tasks (optional)
  celery-beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
    volumes:
      - ./mcp-server:/app
      - ./logs:/app/logs
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    depends_on:
      redis:
        condition: service_healthy
    command: celery -A processors.queue beat --loglevel=info
    restart: unless-stopped

  # Flower for Celery monitoring (optional, for development)
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    depends_on:
      redis:
        condition: service_healthy
    command: celery -A processors.queue flower --port=5555
    profiles:
      - dev

volumes:
  redis_data:
  postgres_data:
  n8n_data:

networks:
  default:
    name: tweetsmash-network